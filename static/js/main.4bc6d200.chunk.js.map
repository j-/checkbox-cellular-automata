{"version":3,"sources":["game.ts","store/actions.ts","store/index.ts","BoardCell.tsx","Board.tsx","Config.tsx","Controls.tsx","App.tsx","index.tsx"],"names":["buildBoard","width","height","Array","fill","getIndexByCoords","x","y","getCellByCoords","board","dimensions","index","getCellByIndex","setCellByCoords","isAlive","setCellByIndex","getNeighborAliveCount","getCellNeighbors","filter","Boolean","length","getCellNextState","rules","count","underPopulationThreshold","overPopulationThreshold","getAliveCellNextState","resurrectionCount","getDeadCellNextState","getNextBoardState","nextState","isActionReset","action","type","isActionTick","isActionSetCell","isActionSetDimensions","setDimensions","payload","isActionSetRules","setRules","isActionClearBoard","DEFAULT_STATE","reducer","state","useSelector","useReactReduxSelector","useDispatch","useReactReduxDispatch","getWidth","getHeight","getUnderPopulationThreshold","getOverPopulationThreshold","getResurrectionCount","BoardCell","dispatch","getBoardCell","handleChange","React","e","currentTarget","checked","setCell","className","onChange","range","iterable","from","Board","_","key","noop","Config","handleClickReset","preventDefault","onSubmit","htmlFor","id","min","max","value","valueAsNumber","onClick","Controls","speed","setSpeed","handleChangeSpeed","Number","handleClickStart","handleClickStop","handleClickTick","handleClickClear","clock","setInterval","clearInterval","role","App","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bc6d200.chunk.js","sourcesContent":["export interface Board extends Array<boolean> {}\r\n\r\nexport interface Rules {\r\n  underPopulationThreshold: number;\r\n  overPopulationThreshold: number;\r\n  resurrectionCount: number;\r\n}\r\n\r\nexport interface Dimensions {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport const buildBoard = (width: number, height: number): Board => (\r\n  Array(width * height).fill(false)\r\n);\r\n\r\nexport const getCellByIndex = (board: Board, index: number): boolean => (\r\n  board[index]\r\n);\r\n\r\nexport const setCellByIndex = (board: Board, index: number, isAlive: boolean): void => {\r\n  board[index] = isAlive\r\n};\r\n\r\nexport const getIndexByCoords = (x: number, y: number, { width, height }: Dimensions) => (\r\n  (((x % width) + width) % width) + (((y % height) + height) % height) * width\r\n);\r\n\r\nexport const getCellByCoords = (board: Board, x: number, y: number, dimensions: Dimensions) => (\r\n  getCellByIndex(board, getIndexByCoords(x, y, dimensions))\r\n);\r\n\r\nexport const setCellByCoords = (board: Board, x: number, y: number, dimensions: Dimensions, isAlive: boolean): void => {\r\n  setCellByIndex(board, getIndexByCoords(x, y, dimensions), isAlive)\r\n};\r\n\r\nexport const getCellNeighbors = (board: Board, x: number, y: number, dimensions: Dimensions) => [\r\n  getCellByCoords(board, x - 1, y - 1, dimensions), // Top left\r\n  getCellByCoords(board, x,     y - 1, dimensions), // Top\r\n  getCellByCoords(board, x + 1, y - 1, dimensions), // Top right\r\n  getCellByCoords(board, x - 1, y,     dimensions), // Left\r\n  getCellByCoords(board, x + 1, y,     dimensions), // Right\r\n  getCellByCoords(board, x - 1, y + 1, dimensions), // Bottom left\r\n  getCellByCoords(board, x,     y + 1, dimensions), // Bottom\r\n  getCellByCoords(board, x + 1, y + 1, dimensions), // Bottom right\r\n];\r\n\r\nexport const getNeighborAliveCount = (board: Board, x: number, y: number, dimensions: Dimensions) => (\r\n  getCellNeighbors(board, x, y, dimensions).filter(Boolean).length\r\n);\r\n\r\nexport const getAliveCellNextState = (board: Board, x: number, y: number, dimensions: Dimensions, rules: Rules) => {\r\n  const count = getNeighborAliveCount(board, x, y, dimensions);\r\n  return count >= rules.underPopulationThreshold && count <= rules.overPopulationThreshold;\r\n};\r\n\r\nexport const getDeadCellNextState = (board: Board, x: number, y: number, dimensions: Dimensions, rules: Rules) => (\r\n  getNeighborAliveCount(board, x, y, dimensions) === rules.resurrectionCount\r\n);\r\n\r\nexport const getCellNextState = (board: Board, x: number, y: number, dimensions: Dimensions, rules: Rules) => (\r\n  getCellByCoords(board, x, y, dimensions) ?\r\n    getAliveCellNextState(board, x, y, dimensions, rules) :\r\n    getDeadCellNextState(board, x, y, dimensions, rules)\r\n);\r\n\r\nexport const getNextBoardState = (board: Board, { width, height }: Dimensions, rules: Rules): Board => {\r\n  const nextState = buildBoard(width, height);\r\n  for (let y = 0; y < height; y++) {\r\n    for (let x = 0; x < width; x++) {\r\n      const isAlive = getCellNextState(board, x, y, { width, height }, rules);\r\n      setCellByCoords(nextState, x, y, { width, height }, isAlive);\r\n    }\r\n  }\r\n  return nextState;\r\n};\r\n","import { Action } from 'redux';\nimport { Rules } from '../game';\n\n/* Reset action */\n\nexport const ACTION_RESET = 'RESET';\n\nexport interface ActionReset extends Action<typeof ACTION_RESET> { }\n\nexport const isActionReset = (action: Action): action is ActionReset => (\n  action.type === ACTION_RESET\n);\n\nexport const reset = (): ActionReset => ({\n  type: ACTION_RESET,\n});\n\n/* Tick action */\n\nexport const ACTION_TICK = 'TICK';\n\nexport interface ActionTick extends Action<typeof ACTION_TICK> { }\n\nexport const isActionTick = (action: Action): action is ActionTick => (\n  action.type === ACTION_TICK\n);\n\nexport const tick = (): ActionTick => ({\n  type: ACTION_TICK,\n});\n\n/* Set cell action */\n\nexport const ACTION_SET_CELL = 'SET_CELL';\n\nexport interface ActionSetCell extends Action<typeof ACTION_SET_CELL> {\n  payload: {\n    x: number;\n    y: number;\n    isAlive: boolean;\n  };\n}\n\nexport const isActionSetCell = (action: Action): action is ActionSetCell => (\n  action.type === ACTION_SET_CELL\n);\n\nexport const setCell = (x: number, y: number, isAlive: boolean): ActionSetCell => ({\n  type: ACTION_SET_CELL,\n  payload: {\n    x,\n    y,\n    isAlive,\n  },\n});\n\n/* Set dimensions action */\n\nexport const ACTION_SET_DIMENSIONS = 'SET_DIMENSIONS';\n\nexport interface ActionSetDimensions extends Action<typeof ACTION_SET_DIMENSIONS> {\n  payload: {\n    width: number;\n    height: number;\n  };\n}\n\nexport const isActionSetDimensions = (action: Action): action is ActionSetDimensions => (\n  action.type === ACTION_SET_DIMENSIONS\n);\n\nexport const setDimensions = (width: number, height: number): ActionSetDimensions => ({\n  type: ACTION_SET_DIMENSIONS,\n  payload: {\n    width,\n    height,\n  },\n});\n\n/* Set rules action */\n\nexport const ACTION_SET_RULES = 'SET_RULES';\n\nexport interface ActionSetRules extends Action<typeof ACTION_SET_RULES> {\n  payload: Rules;\n}\n\nexport const isActionSetRules = (action: Action): action is ActionSetRules => (\n  action.type === ACTION_SET_RULES\n);\n\nexport const setRules = (rules: Rules): ActionSetRules => ({\n  type: ACTION_SET_RULES,\n  payload: rules,\n});\n\n/* Clear board action */\n\nexport const ACTION_CLEAR_BOARD = 'CLEAR_BOARD';\n\nexport interface ActionClearBoard extends Action<typeof ACTION_CLEAR_BOARD> { }\n\nexport const isActionClearBoard = (action: Action): action is ActionClearBoard => (\n  action.type === ACTION_CLEAR_BOARD\n);\n\nexport const clearBoard = (): ActionClearBoard => ({\n  type: ACTION_CLEAR_BOARD,\n});\n","import { Reducer } from 'redux';\nimport { TypedUseSelectorHook, useSelector as useReactReduxSelector, useDispatch as useReactReduxDispatch } from 'react-redux';\nimport { Rules, Dimensions, Board, buildBoard, getNextBoardState, getCellByCoords, setCellByCoords } from '../game';\nimport { isActionReset, isActionTick, isActionSetCell, isActionSetDimensions, isActionSetRules, isActionClearBoard } from './actions';\n\nexport interface RootReducerState {\n  rules: Rules;\n  dimensions: Dimensions;\n  board: Board;\n}\n\nconst DEFAULT_WIDTH = 20;\nconst DEFAULT_HEIGHT = 20;\n\nexport const DEFAULT_STATE: RootReducerState = {\n  rules: {\n    underPopulationThreshold: 2,\n    overPopulationThreshold: 3,\n    resurrectionCount: 3,\n  },\n  dimensions: {\n    width: DEFAULT_WIDTH,\n    height: DEFAULT_HEIGHT,\n  },\n  board: buildBoard(DEFAULT_WIDTH, DEFAULT_HEIGHT),\n};\n\nexport const reducer: Reducer<RootReducerState> = (state = DEFAULT_STATE, action) => {\n  if (isActionReset(action)) {\n    return DEFAULT_STATE;\n  }\n\n  if (isActionClearBoard(action)) {\n    return {\n      ...state,\n      board: buildBoard(state.dimensions.width, state.dimensions.height),\n    };\n  }\n\n  if (isActionTick(action)) {\n    const { rules, dimensions, board } = state;\n    return {\n      ...state,\n      board: getNextBoardState(board, dimensions, rules),\n    };\n  }\n\n  if (isActionSetCell(action)) {\n    const { board, dimensions } = state;\n    const { x, y, isAlive } = action.payload;\n    const nextState = [...board];\n    setCellByCoords(nextState, x, y, dimensions, isAlive);\n    return {\n      ...state,\n      board: nextState,\n    };\n  }\n\n  if (isActionSetDimensions(action)) {\n    const { width, height } = action.payload;\n    const board = buildBoard(width, height);\n    return {\n      ...state,\n      dimensions: {\n        width,\n        height,\n      },\n      board,\n    };\n  }\n\n  if (isActionSetRules(action)) {\n    return {\n      ...state,\n      rules: action.payload,\n    };\n  }\n  \n  return state;\n};\n\nexport default reducer;\n\nexport const useSelector: TypedUseSelectorHook<RootReducerState> = useReactReduxSelector;\nexport const useDispatch = useReactReduxDispatch;\n\nexport const getWidth = (state: RootReducerState) => state.dimensions.width;\nexport const getHeight = (state: RootReducerState) => state.dimensions.height;\nexport const getBoardCell = (state: RootReducerState, x: number, y: number) => getCellByCoords(state.board, x, y, state.dimensions);\nexport const getUnderPopulationThreshold = (state: RootReducerState) => state.rules.underPopulationThreshold;\nexport const getOverPopulationThreshold = (state: RootReducerState) => state.rules.overPopulationThreshold;\nexport const getResurrectionCount = (state: RootReducerState) => state.rules.resurrectionCount;\n","import * as React from 'react';\r\nimport { useDispatch, useSelector, getBoardCell } from './store';\r\nimport { setCell } from './store/actions';\r\nimport './BoardCell.css';\r\n\r\nexport interface Props {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst BoardCell: React.FC<Props> = ({ x, y }) => {\r\n  const dispatch = useDispatch();\r\n  const isAlive = useSelector((state) => getBoardCell(state, x, y));\r\n  const handleChange = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\r\n    const isAlive = e.currentTarget.checked;\r\n    dispatch(setCell(x, y, isAlive));\r\n  }, [dispatch, x, y]);\r\n  return <input className=\"BoardCell\" type=\"checkbox\" checked={isAlive} onChange={handleChange} />\r\n};\r\n\r\nexport default BoardCell;\r\n","import * as React from 'react';\r\nimport { useSelector, getWidth, getHeight } from './store';\r\nimport BoardCell from './BoardCell';\r\nimport './Board.css';\r\n\r\nfunction range <T>(count: number, iterable: (item: undefined, i: number) => T) {\r\n  return Array.from(Array(count), iterable);\r\n}\r\n\r\nconst Board: React.FC = () => {\r\n  const width = useSelector(getWidth);\r\n  const height = useSelector(getHeight);\r\n  return (\r\n    <table className=\"Board\">\r\n      <tbody>\r\n        {range(height, (_, y) => (\r\n          <tr key={y}>\r\n            {range(width, (_, x) => (\r\n              <td key={x}>\r\n                <BoardCell x={x} y={y} />\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import * as React from 'react';\r\nimport { useDispatch, useSelector, getWidth, getHeight, getUnderPopulationThreshold, getOverPopulationThreshold, getResurrectionCount } from './store';\r\nimport { reset, setDimensions, setRules } from './store/actions';\r\n\r\nconst noop = () => {};\r\n\r\nconst Config: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const width = useSelector(getWidth);\r\n  const height = useSelector(getHeight);\r\n  const underPopulationThreshold = useSelector(getUnderPopulationThreshold);\r\n  const overPopulationThreshold = useSelector(getOverPopulationThreshold);\r\n  const resurrectionCount = useSelector(getResurrectionCount);\r\n  const handleClickReset = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\r\n    e.preventDefault();\r\n    dispatch(reset());\r\n  }, [dispatch]);\r\n  return (\r\n    <form onSubmit={noop}>\r\n      <fieldset>\r\n        <legend>Dimensions</legend>\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-sm\">\r\n            <label htmlFor=\"Config-width\">Width</label><br />\r\n            <input\r\n              id=\"Config-width\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              min={3}\r\n              max={30}\r\n              value={width}\r\n              onChange={(e) => dispatch(setDimensions(e.currentTarget.valueAsNumber, height))}\r\n            />\r\n          </div>\r\n          <div className=\"form-group col-sm\">\r\n            <label htmlFor=\"Config-height\">Height</label><br />\r\n            <input\r\n              id=\"Config-height\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              min={3}\r\n              max={30}\r\n              value={height}\r\n              onChange={(e) => dispatch(setDimensions(width, e.currentTarget.valueAsNumber))}\r\n            />\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n      <br />\r\n      <fieldset>\r\n        <legend>Rules</legend>\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-sm\">\r\n            <label htmlFor=\"Config-under\">Under population threshold</label><br />\r\n            <input\r\n              id=\"Config-under\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              min={0}\r\n              max={8}\r\n              value={underPopulationThreshold}\r\n              onChange={(e) => dispatch(setRules({\r\n                underPopulationThreshold: e.currentTarget.valueAsNumber,\r\n                overPopulationThreshold,\r\n                resurrectionCount,\r\n              }))}\r\n            />\r\n          </div>\r\n          <div className=\"form-group col-sm\">\r\n            <label htmlFor=\"Config-over\">Over population threshold</label><br />\r\n            <input\r\n              id=\"Config-over\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              min={0}\r\n              max={8}\r\n              value={overPopulationThreshold}\r\n              onChange={(e) => dispatch(setRules({\r\n                underPopulationThreshold,\r\n                overPopulationThreshold: e.currentTarget.valueAsNumber,\r\n                resurrectionCount,\r\n              }))}\r\n            />\r\n          </div>\r\n          <div className=\"form-group col-sm\">\r\n            <label htmlFor=\"Config-resurrection\">Resurrection count</label><br />\r\n            <input\r\n              id=\"Config-resurrection\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              min={0}\r\n              max={8}\r\n              value={resurrectionCount}\r\n              onChange={(e) => dispatch(setRules({\r\n                underPopulationThreshold,\r\n                overPopulationThreshold,\r\n                resurrectionCount: e.currentTarget.valueAsNumber,\r\n              }))}\r\n            />\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n      <br />\r\n      <button className=\"btn btn-light\" type=\"submit\" onClick={handleClickReset}>Reset config</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Config;\r\n","import * as React from 'react';\r\nimport { useDispatch } from './store';\r\nimport { tick, clearBoard } from './store/actions';\r\n\r\nconst Controls: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [speed, setSpeed] = React.useState<number>(0);\r\n  const handleChangeSpeed = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\r\n    setSpeed(Number(e.currentTarget.value));\r\n  }, []);\r\n  const handleClickStart = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\r\n    e.preventDefault();\r\n    setSpeed(1);\r\n  }, []);\r\n  const handleClickStop = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\r\n    e.preventDefault();\r\n    setSpeed(0);\r\n  }, []);\r\n  const handleClickTick = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\r\n    e.preventDefault();\r\n    dispatch(tick());\r\n  }, [dispatch]);\r\n  const handleClickClear = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\r\n    e.preventDefault();\r\n    dispatch(clearBoard());\r\n  }, [dispatch]);\r\n  React.useEffect(() => {\r\n    if (speed <= 0) return;\r\n    const interval = 1000 / speed;\r\n    const clock = setInterval(() => {\r\n      dispatch(tick());\r\n    }, interval);\r\n    return () => clearInterval(clock);\r\n  }, [dispatch, speed]);\r\n  return (\r\n    <div className=\"Controls\">\r\n      <fieldset>\r\n        <legend>Controls</legend>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Controls-speed\">Speed</label><br />\r\n          <input id=\"Controls-speed\" className=\"form-control-range\" type=\"range\" min={0} max={60} value={speed} onChange={handleChangeSpeed} />\r\n        </div>\r\n      </fieldset>\r\n      <br />\r\n      <fieldset>\r\n        <legend>Actions</legend>\r\n        <div className=\"d-flex\">\r\n          <div className=\"btn-group flex-fill\" role=\"group\">\r\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickStart}>Start</button>\r\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickStop}>Stop</button>\r\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickTick}>Tick</button>\r\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickClear}>Clear</button>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import * as React from 'react';\nimport Board from './Board';\nimport Config from './Config';\nimport Controls from './Controls';\n\nconst App: React.FC = () => (\n  <div className=\"App container-fluid\">\n    <h1 className=\"mt-5 mb-4\">Checkbox cellular automata</h1>\n    <div className=\"row\">\n      <div className=\"col-md\">\n        <div className=\"card card-body\">\n          <Config />\n        </div>\n      </div>\n      <div className=\"col-md\">\n        <div className=\"card card-body\">\n          <Controls />\n        </div>\n      </div>\n    </div>\n    <div className=\"mt-5 mb-5 d-flex justify-content-center\">\n      <Board />\n    </div>\n  </div>\n);\n\nexport default App;\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Provider as StoreProvider } from 'react-redux';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nrender(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}