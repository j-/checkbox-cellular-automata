{"version":3,"sources":["game.ts","store/actions.ts","store/index.ts","BoardCell.tsx","Board.tsx","use-draw-checks.ts","Config.tsx","Controls.tsx","App.tsx","index.tsx"],"names":["buildBoard","width","height","Array","fill","getIndexByCoords","x","y","getCellByCoords","board","dimensions","index","getCellByIndex","setCellByCoords","isAlive","setCellByIndex","getNeighborAliveCount","getCellNeighbors","filter","Boolean","length","getCellNextState","rules","count","underPopulationThreshold","overPopulationThreshold","getAliveCellNextState","resurrectionCount","getDeadCellNextState","getNextBoardState","nextState","resizeBoard","oldBoard","oldDimensions","newDimensions","oldWidth","oldHeight","newWidth","newHeight","newBoard","minWidth","Math","min","minHeight","oldX","round","max","oldY","newX","newY","isActionReset","action","type","isActionTick","isActionSetCell","isActionSetDimensions","setDimensions","payload","isActionSetRules","setRules","isActionClearBoard","DEFAULT_STATE","reducer","state","useSelector","useReactReduxSelector","useDispatch","useReactReduxDispatch","getWidth","getHeight","getUnderPopulationThreshold","getOverPopulationThreshold","getResurrectionCount","BoardCell","dispatch","getBoardCell","handleChange","React","e","currentTarget","checked","setCell","className","onChange","range","iterable","from","Board","tableRef","elementRef","element","current","checkedValue","handleMousemove","checkbox","target","nodeName","click","handleMouseup","window","removeEventListener","handleMousedown","addEventListener","useDrawChecks","ref","_","key","noop","Config","handleClickReset","preventDefault","onSubmit","htmlFor","id","value","valueAsNumber","onClick","Controls","speed","setSpeed","handleChangeSpeed","Number","handleClickStart","handleClickStop","handleClickTick","handleClickClear","clock","setInterval","clearInterval","role","App","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.00d319e0.chunk.js","sourcesContent":["export interface Board extends Array<boolean> {}\n\nexport interface Rules {\n  underPopulationThreshold: number;\n  overPopulationThreshold: number;\n  resurrectionCount: number;\n}\n\nexport interface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const buildBoard = (width: number, height: number): Board => (\n  Array(width * height).fill(false)\n);\n\nexport const getCellByIndex = (board: Board, index: number): boolean => (\n  board[index]\n);\n\nexport const setCellByIndex = (board: Board, index: number, isAlive: boolean): void => {\n  board[index] = isAlive\n};\n\nexport const getIndexByCoords = (x: number, y: number, { width, height }: Dimensions) => (\n  (((x % width) + width) % width) + (((y % height) + height) % height) * width\n);\n\nexport const getCellByCoords = (board: Board, x: number, y: number, dimensions: Dimensions) => (\n  getCellByIndex(board, getIndexByCoords(x, y, dimensions))\n);\n\nexport const setCellByCoords = (board: Board, x: number, y: number, dimensions: Dimensions, isAlive: boolean): void => {\n  setCellByIndex(board, getIndexByCoords(x, y, dimensions), isAlive)\n};\n\nexport const getCellNeighbors = (board: Board, x: number, y: number, dimensions: Dimensions) => [\n  getCellByCoords(board, x - 1, y - 1, dimensions), // Top left\n  getCellByCoords(board, x,     y - 1, dimensions), // Top\n  getCellByCoords(board, x + 1, y - 1, dimensions), // Top right\n  getCellByCoords(board, x - 1, y,     dimensions), // Left\n  getCellByCoords(board, x + 1, y,     dimensions), // Right\n  getCellByCoords(board, x - 1, y + 1, dimensions), // Bottom left\n  getCellByCoords(board, x,     y + 1, dimensions), // Bottom\n  getCellByCoords(board, x + 1, y + 1, dimensions), // Bottom right\n];\n\nexport const getNeighborAliveCount = (board: Board, x: number, y: number, dimensions: Dimensions) => (\n  getCellNeighbors(board, x, y, dimensions).filter(Boolean).length\n);\n\nexport const getAliveCellNextState = (board: Board, x: number, y: number, dimensions: Dimensions, rules: Rules) => {\n  const count = getNeighborAliveCount(board, x, y, dimensions);\n  return count >= rules.underPopulationThreshold && count <= rules.overPopulationThreshold;\n};\n\nexport const getDeadCellNextState = (board: Board, x: number, y: number, dimensions: Dimensions, rules: Rules) => (\n  getNeighborAliveCount(board, x, y, dimensions) === rules.resurrectionCount\n);\n\nexport const getCellNextState = (board: Board, x: number, y: number, dimensions: Dimensions, rules: Rules) => (\n  getCellByCoords(board, x, y, dimensions) ?\n    getAliveCellNextState(board, x, y, dimensions, rules) :\n    getDeadCellNextState(board, x, y, dimensions, rules)\n);\n\nexport const getNextBoardState = (board: Board, { width, height }: Dimensions, rules: Rules): Board => {\n  const nextState = buildBoard(width, height);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const isAlive = getCellNextState(board, x, y, { width, height }, rules);\n      setCellByCoords(nextState, x, y, { width, height }, isAlive);\n    }\n  }\n  return nextState;\n};\n\nexport const resizeBoard = (oldBoard: Board, oldDimensions: Dimensions, newDimensions: Dimensions): Board => {\n  const { width: oldWidth, height: oldHeight } = oldDimensions;\n  const { width: newWidth, height: newHeight } = newDimensions;\n  const newBoard = buildBoard(newWidth, newHeight);\n  const minWidth = Math.min(newWidth, oldWidth);\n  const minHeight = Math.min(newHeight, oldHeight);\n  for (let y = 0; y < minHeight; y++) {\n    for (let x = 0; x < minWidth; x++) {\n      const oldX = x + Math.round(Math.max(oldWidth - newWidth, 0) / 2);\n      const oldY = y + Math.round(Math.max(oldHeight - newHeight, 0) / 2);\n      const newX = x + Math.round(Math.max(newWidth - oldWidth, 0) / 2);\n      const newY = y + Math.round(Math.max(newHeight - oldHeight, 0) / 2);\n      const isAlive = getCellByCoords(oldBoard, oldX, oldY, oldDimensions);\n      setCellByCoords(newBoard, newX, newY, newDimensions, isAlive);\n    }\n  }\n  return newBoard;\n};\n","import { Action } from 'redux';\nimport { Rules } from '../game';\n\n/* Reset action */\n\nexport const ACTION_RESET = 'RESET';\n\nexport interface ActionReset extends Action<typeof ACTION_RESET> { }\n\nexport const isActionReset = (action: Action): action is ActionReset => (\n  action.type === ACTION_RESET\n);\n\nexport const reset = (): ActionReset => ({\n  type: ACTION_RESET,\n});\n\n/* Tick action */\n\nexport const ACTION_TICK = 'TICK';\n\nexport interface ActionTick extends Action<typeof ACTION_TICK> { }\n\nexport const isActionTick = (action: Action): action is ActionTick => (\n  action.type === ACTION_TICK\n);\n\nexport const tick = (): ActionTick => ({\n  type: ACTION_TICK,\n});\n\n/* Set cell action */\n\nexport const ACTION_SET_CELL = 'SET_CELL';\n\nexport interface ActionSetCell extends Action<typeof ACTION_SET_CELL> {\n  payload: {\n    x: number;\n    y: number;\n    isAlive: boolean;\n  };\n}\n\nexport const isActionSetCell = (action: Action): action is ActionSetCell => (\n  action.type === ACTION_SET_CELL\n);\n\nexport const setCell = (x: number, y: number, isAlive: boolean): ActionSetCell => ({\n  type: ACTION_SET_CELL,\n  payload: {\n    x,\n    y,\n    isAlive,\n  },\n});\n\n/* Set dimensions action */\n\nexport const ACTION_SET_DIMENSIONS = 'SET_DIMENSIONS';\n\nexport interface ActionSetDimensions extends Action<typeof ACTION_SET_DIMENSIONS> {\n  payload: {\n    width: number;\n    height: number;\n  };\n}\n\nexport const isActionSetDimensions = (action: Action): action is ActionSetDimensions => (\n  action.type === ACTION_SET_DIMENSIONS\n);\n\nexport const setDimensions = (width: number, height: number): ActionSetDimensions => ({\n  type: ACTION_SET_DIMENSIONS,\n  payload: {\n    width,\n    height,\n  },\n});\n\n/* Set rules action */\n\nexport const ACTION_SET_RULES = 'SET_RULES';\n\nexport interface ActionSetRules extends Action<typeof ACTION_SET_RULES> {\n  payload: Rules;\n}\n\nexport const isActionSetRules = (action: Action): action is ActionSetRules => (\n  action.type === ACTION_SET_RULES\n);\n\nexport const setRules = (rules: Rules): ActionSetRules => ({\n  type: ACTION_SET_RULES,\n  payload: rules,\n});\n\n/* Clear board action */\n\nexport const ACTION_CLEAR_BOARD = 'CLEAR_BOARD';\n\nexport interface ActionClearBoard extends Action<typeof ACTION_CLEAR_BOARD> { }\n\nexport const isActionClearBoard = (action: Action): action is ActionClearBoard => (\n  action.type === ACTION_CLEAR_BOARD\n);\n\nexport const clearBoard = (): ActionClearBoard => ({\n  type: ACTION_CLEAR_BOARD,\n});\n","import { Reducer } from 'redux';\nimport { TypedUseSelectorHook, useSelector as useReactReduxSelector, useDispatch as useReactReduxDispatch } from 'react-redux';\nimport { Rules, Dimensions, Board, buildBoard, getNextBoardState, getCellByCoords, setCellByCoords, resizeBoard } from '../game';\nimport { isActionReset, isActionTick, isActionSetCell, isActionSetDimensions, isActionSetRules, isActionClearBoard } from './actions';\n\nexport interface RootReducerState {\n  rules: Rules;\n  dimensions: Dimensions;\n  board: Board;\n}\n\nconst DEFAULT_WIDTH = 20;\nconst DEFAULT_HEIGHT = 20;\n\nexport const DEFAULT_STATE: RootReducerState = {\n  rules: {\n    underPopulationThreshold: 2,\n    overPopulationThreshold: 3,\n    resurrectionCount: 3,\n  },\n  dimensions: {\n    width: DEFAULT_WIDTH,\n    height: DEFAULT_HEIGHT,\n  },\n  board: buildBoard(DEFAULT_WIDTH, DEFAULT_HEIGHT),\n};\n\nexport const reducer: Reducer<RootReducerState> = (state = DEFAULT_STATE, action) => {\n  if (isActionReset(action)) {\n    return DEFAULT_STATE;\n  }\n\n  if (isActionClearBoard(action)) {\n    return {\n      ...state,\n      board: buildBoard(state.dimensions.width, state.dimensions.height),\n    };\n  }\n\n  if (isActionTick(action)) {\n    const { rules, dimensions, board } = state;\n    return {\n      ...state,\n      board: getNextBoardState(board, dimensions, rules),\n    };\n  }\n\n  if (isActionSetCell(action)) {\n    const { board, dimensions } = state;\n    const { x, y, isAlive } = action.payload;\n    const nextState = [...board];\n    setCellByCoords(nextState, x, y, dimensions, isAlive);\n    return {\n      ...state,\n      board: nextState,\n    };\n  }\n\n  if (isActionSetDimensions(action)) {\n    const board = resizeBoard(state.board, state.dimensions, action.payload);\n    return {\n      ...state,\n      dimensions: {\n        width: action.payload.width,\n        height: action.payload.height,\n      },\n      board,\n    };\n  }\n\n  if (isActionSetRules(action)) {\n    return {\n      ...state,\n      rules: action.payload,\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;\n\nexport const useSelector: TypedUseSelectorHook<RootReducerState> = useReactReduxSelector;\nexport const useDispatch = useReactReduxDispatch;\n\nexport const getWidth = (state: RootReducerState) => state.dimensions.width;\nexport const getHeight = (state: RootReducerState) => state.dimensions.height;\nexport const getBoardCell = (state: RootReducerState, x: number, y: number) => getCellByCoords(state.board, x, y, state.dimensions);\nexport const getUnderPopulationThreshold = (state: RootReducerState) => state.rules.underPopulationThreshold;\nexport const getOverPopulationThreshold = (state: RootReducerState) => state.rules.overPopulationThreshold;\nexport const getResurrectionCount = (state: RootReducerState) => state.rules.resurrectionCount;\n","import * as React from 'react';\nimport { useDispatch, useSelector, getBoardCell } from './store';\nimport { setCell } from './store/actions';\nimport './BoardCell.css';\n\nexport interface Props {\n  x: number;\n  y: number;\n}\n\nconst BoardCell: React.FC<Props> = ({ x, y }) => {\n  const dispatch = useDispatch();\n  const isAlive = useSelector((state) => getBoardCell(state, x, y));\n  const handleChange = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\n    const isAlive = e.currentTarget.checked;\n    dispatch(setCell(x, y, isAlive));\n  }, [dispatch, x, y]);\n  return <input className=\"BoardCell\" type=\"checkbox\" checked={isAlive} onChange={handleChange} />\n};\n\nexport default BoardCell;\n","import * as React from 'react';\nimport { useSelector, getWidth, getHeight } from './store';\nimport { useDrawChecks } from './use-draw-checks';\nimport BoardCell from './BoardCell';\nimport './Board.css';\n\nfunction range <T>(count: number, iterable: (item: undefined, i: number) => T) {\n  return Array.from(Array(count), iterable);\n}\n\nconst Board: React.FC = () => {\n  const width = useSelector(getWidth);\n  const height = useSelector(getHeight);\n  const tableRef = useDrawChecks<HTMLTableElement>();\n  return (\n    <table className=\"Board\" ref={tableRef}>\n      <tbody>\n        {range(height, (_, y) => (\n          <tr key={y}>\n            {range(width, (_, x) => (\n              <td key={x}>\n                <BoardCell x={x} y={y} />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Board;\n","import * as React from 'react';\n\nexport const useDrawChecks = <TElement extends HTMLElement>() => {\n  const elementRef = React.useRef<TElement>(null);\n  React.useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n    // Remember what the initial checkbox state was\n    let checkedValue: boolean;\n    // Called after mousedown whenever the mouse moves until mouseup\n    const handleMousemove = (e: MouseEvent) => {\n      const checkbox = e.target as HTMLInputElement;\n      // If target is not an input then exit early\n      if (!checkbox || checkbox.nodeName !== 'INPUT') return;\n      // Set the value and trigger a change event\n      checkbox.checked = checkedValue;\n      checkbox.click();\n    };\n    // Stops the mousemove listener firing\n    const handleMouseup = (e: MouseEvent) => {\n      window.removeEventListener('mousemove', handleMousemove);\n    };\n    // Starts the drawing process\n    const handleMousedown = (e: MouseEvent) => {\n      const checkbox = e.target as HTMLInputElement;\n      // If target is not an input then exit early\n      if (!checkbox || checkbox.nodeName !== 'INPUT') return;\n      checkedValue = checkbox.checked;\n      window.addEventListener('mousemove', handleMousemove);\n      window.addEventListener('mouseup', handleMouseup);\n    };\n    element.addEventListener('mousedown', handleMousedown);\n    // Remove all listeners on unmount\n    return () => {\n      element.removeEventListener('mousedown', handleMousedown);\n      window.removeEventListener('mousemove', handleMousemove);\n      window.removeEventListener('mouseup', handleMouseup);\n    };\n  }, []);\n  return elementRef;\n};\n","import * as React from 'react';\nimport { useDispatch, useSelector, getWidth, getHeight, getUnderPopulationThreshold, getOverPopulationThreshold, getResurrectionCount } from './store';\nimport { reset, setDimensions, setRules } from './store/actions';\n\nconst noop = () => {};\n\nconst Config: React.FC = () => {\n  const dispatch = useDispatch();\n  const width = useSelector(getWidth);\n  const height = useSelector(getHeight);\n  const underPopulationThreshold = useSelector(getUnderPopulationThreshold);\n  const overPopulationThreshold = useSelector(getOverPopulationThreshold);\n  const resurrectionCount = useSelector(getResurrectionCount);\n  const handleClickReset = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\n    e.preventDefault();\n    dispatch(reset());\n  }, [dispatch]);\n  return (\n    <form onSubmit={noop}>\n      <fieldset>\n        <legend>Dimensions</legend>\n        <div className=\"row\">\n          <div className=\"form-group col-sm\">\n            <label htmlFor=\"Config-width\">Width</label><br />\n            <input\n              id=\"Config-width\"\n              className=\"form-control\"\n              type=\"number\"\n              min={3}\n              max={30}\n              value={width}\n              onChange={(e) => dispatch(setDimensions(e.currentTarget.valueAsNumber, height))}\n            />\n          </div>\n          <div className=\"form-group col-sm\">\n            <label htmlFor=\"Config-height\">Height</label><br />\n            <input\n              id=\"Config-height\"\n              className=\"form-control\"\n              type=\"number\"\n              min={3}\n              max={30}\n              value={height}\n              onChange={(e) => dispatch(setDimensions(width, e.currentTarget.valueAsNumber))}\n            />\n          </div>\n        </div>\n      </fieldset>\n      <br />\n      <fieldset>\n        <legend>Rules</legend>\n        <div className=\"row\">\n          <div className=\"form-group col-sm\">\n            <label htmlFor=\"Config-under\">Under population threshold</label><br />\n            <input\n              id=\"Config-under\"\n              className=\"form-control\"\n              type=\"number\"\n              min={0}\n              max={8}\n              value={underPopulationThreshold}\n              onChange={(e) => dispatch(setRules({\n                underPopulationThreshold: e.currentTarget.valueAsNumber,\n                overPopulationThreshold,\n                resurrectionCount,\n              }))}\n            />\n          </div>\n          <div className=\"form-group col-sm\">\n            <label htmlFor=\"Config-over\">Over population threshold</label><br />\n            <input\n              id=\"Config-over\"\n              className=\"form-control\"\n              type=\"number\"\n              min={0}\n              max={8}\n              value={overPopulationThreshold}\n              onChange={(e) => dispatch(setRules({\n                underPopulationThreshold,\n                overPopulationThreshold: e.currentTarget.valueAsNumber,\n                resurrectionCount,\n              }))}\n            />\n          </div>\n          <div className=\"form-group col-sm\">\n            <label htmlFor=\"Config-resurrection\">Resurrection count</label><br />\n            <input\n              id=\"Config-resurrection\"\n              className=\"form-control\"\n              type=\"number\"\n              min={0}\n              max={8}\n              value={resurrectionCount}\n              onChange={(e) => dispatch(setRules({\n                underPopulationThreshold,\n                overPopulationThreshold,\n                resurrectionCount: e.currentTarget.valueAsNumber,\n              }))}\n            />\n          </div>\n        </div>\n      </fieldset>\n      <br />\n      <button className=\"btn btn-light\" type=\"submit\" onClick={handleClickReset}>Reset config</button>\n    </form>\n  );\n};\n\nexport default Config;\n","import * as React from 'react';\nimport { useDispatch } from './store';\nimport { tick, clearBoard } from './store/actions';\n\nconst Controls: React.FC = () => {\n  const dispatch = useDispatch();\n  const [speed, setSpeed] = React.useState<number>(0);\n  const handleChangeSpeed = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\n    setSpeed(Number(e.currentTarget.value));\n  }, []);\n  const handleClickStart = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\n    e.preventDefault();\n    setSpeed(1);\n  }, []);\n  const handleClickStop = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\n    e.preventDefault();\n    setSpeed(0);\n  }, []);\n  const handleClickTick = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\n    e.preventDefault();\n    dispatch(tick());\n  }, [dispatch]);\n  const handleClickClear = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\n    e.preventDefault();\n    dispatch(clearBoard());\n  }, [dispatch]);\n  React.useEffect(() => {\n    if (speed <= 0) return;\n    const interval = 1000 / speed;\n    const clock = setInterval(() => {\n      dispatch(tick());\n    }, interval);\n    return () => clearInterval(clock);\n  }, [dispatch, speed]);\n  return (\n    <div className=\"Controls\">\n      <fieldset>\n        <legend>Controls</legend>\n        <div className=\"form-group\">\n          <label htmlFor=\"Controls-speed\">Speed</label><br />\n          <input id=\"Controls-speed\" className=\"form-control-range\" type=\"range\" min={0} max={60} value={speed} onChange={handleChangeSpeed} />\n        </div>\n      </fieldset>\n      <br />\n      <fieldset>\n        <legend>Actions</legend>\n        <div className=\"d-flex\">\n          <div className=\"btn-group flex-fill\" role=\"group\">\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickStart}>Start</button>\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickStop}>Stop</button>\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickTick}>Tick</button>\n            <button className=\"btn btn-light\" type=\"button\" onClick={handleClickClear}>Clear</button>\n          </div>\n        </div>\n      </fieldset>\n    </div>\n  );\n};\n\nexport default Controls;\n","import * as React from 'react';\nimport Board from './Board';\nimport Config from './Config';\nimport Controls from './Controls';\n\nconst App: React.FC = () => (\n  <div className=\"App container-fluid\">\n    <h1 className=\"mt-5 mb-4\">Checkbox cellular automata</h1>\n    <div className=\"row\">\n      <div className=\"col-md\">\n        <div className=\"card card-body\">\n          <Config />\n        </div>\n      </div>\n      <div className=\"col-md\">\n        <div className=\"card card-body\">\n          <Controls />\n        </div>\n      </div>\n    </div>\n    <div className=\"mt-5 mb-5 d-flex justify-content-center\">\n      <Board />\n    </div>\n  </div>\n);\n\nexport default App;\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Provider as StoreProvider } from 'react-redux';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nrender(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}